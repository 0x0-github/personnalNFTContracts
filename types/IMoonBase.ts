/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IMoonBaseInterface extends utils.Interface {
  contractName: "IMoonBase";
  functions: {
    "currentMintId()": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "mintPaused()": FunctionFragment;
    "mintPrice()": FunctionFragment;
    "updateCurrentMintId(uint256)": FunctionFragment;
    "updateMintPaused(bool)": FunctionFragment;
    "updateMintPrice(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentMintId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mintPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCurrentMintId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintPrice",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentMintId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCurrentMintId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintPrice",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMoonBase extends BaseContract {
  contractName: "IMoonBase";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMoonBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currentMintId(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPaused(overrides?: CallOverrides): Promise<[boolean]>;

    mintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCurrentMintId(
      mintId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMintPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMintPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  currentMintId(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPaused(overrides?: CallOverrides): Promise<boolean>;

  mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  updateCurrentMintId(
    mintId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMintPaused(
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMintPrice(
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    currentMintId(overrides?: CallOverrides): Promise<BigNumber>;

    mint(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mintPaused(overrides?: CallOverrides): Promise<boolean>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    updateCurrentMintId(
      mintId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMintPaused(paused: boolean, overrides?: CallOverrides): Promise<void>;

    updateMintPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    currentMintId(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPaused(overrides?: CallOverrides): Promise<BigNumber>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    updateCurrentMintId(
      mintId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMintPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMintPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentMintId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCurrentMintId(
      mintId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMintPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMintPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
