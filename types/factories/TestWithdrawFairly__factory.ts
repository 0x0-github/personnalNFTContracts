/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestWithdrawFairly,
  TestWithdrawFairlyInterface,
} from "../TestWithdrawFairly";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "callers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "parts",
    outputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "salePart",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "royaltiesPart",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "shareRoyaltiesPart",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shareSalesPart",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "";

type TestWithdrawFairlyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWithdrawFairlyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWithdrawFairly__factory extends ContractFactory {
  constructor(...args: TestWithdrawFairlyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TestWithdrawFairly";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestWithdrawFairly> {
    return super.deploy(overrides || {}) as Promise<TestWithdrawFairly>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestWithdrawFairly {
    return super.attach(address) as TestWithdrawFairly;
  }
  connect(signer: Signer): TestWithdrawFairly__factory {
    return super.connect(signer) as TestWithdrawFairly__factory;
  }
  static readonly contractName: "TestWithdrawFairly";
  public readonly contractName: "TestWithdrawFairly";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWithdrawFairlyInterface {
    return new utils.Interface(_abi) as TestWithdrawFairlyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWithdrawFairly {
    return new Contract(address, _abi, signerOrProvider) as TestWithdrawFairly;
  }
}
