/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TestMoonBaseInterface extends utils.Interface {
  contractName: "TestMoonBase";
  functions: {
    "canClaim(uint256)": FunctionFragment;
    "canMint(uint256)": FunctionFragment;
    "claim(uint256[])": FunctionFragment;
    "currentClaimId()": FunctionFragment;
    "currentMintId()": FunctionFragment;
    "lastClaimId()": FunctionFragment;
    "lastMintId()": FunctionFragment;
    "maxMintTx()": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "mintBatches(uint256)": FunctionFragment;
    "mintPaused()": FunctionFragment;
    "mintPrice()": FunctionFragment;
    "mlz()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCurrentClaimId(uint256)": FunctionFragment;
    "updateCurrentMintId(uint256)": FunctionFragment;
    "updateLastClaimId(uint256)": FunctionFragment;
    "updateLastMintId(uint256)": FunctionFragment;
    "updateMaxMintTx(uint256)": FunctionFragment;
    "updateMintPaused(bool)": FunctionFragment;
    "updateMintPrice(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawNFT(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentClaimId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentMintId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastMintId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxMintTx", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mintBatches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "mlz", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCurrentClaimId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCurrentMintId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLastClaimId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLastMintId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxMintTx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "canClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentClaimId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMintId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastMintId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMintTx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mlz", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCurrentClaimId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCurrentMintId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLastClaimId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLastMintId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxMintTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdatedCurrentClaimId(uint256)": EventFragment;
    "UpdatedCurrentMintId(uint256)": EventFragment;
    "UpdatedLastClaimId(uint256)": EventFragment;
    "UpdatedLastMintId(uint256)": EventFragment;
    "UpdatedMaxMintTx(uint256)": EventFragment;
    "UpdatedMintPaused(bool)": EventFragment;
    "UpdatedMintPrice(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedCurrentClaimId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedCurrentMintId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedLastClaimId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedLastMintId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMaxMintTx"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMintPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMintPrice"): EventFragment;
}

export type ClaimedEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UpdatedCurrentClaimIdEvent = TypedEvent<
  [BigNumber],
  { current: BigNumber }
>;

export type UpdatedCurrentClaimIdEventFilter =
  TypedEventFilter<UpdatedCurrentClaimIdEvent>;

export type UpdatedCurrentMintIdEvent = TypedEvent<
  [BigNumber],
  { current: BigNumber }
>;

export type UpdatedCurrentMintIdEventFilter =
  TypedEventFilter<UpdatedCurrentMintIdEvent>;

export type UpdatedLastClaimIdEvent = TypedEvent<
  [BigNumber],
  { last: BigNumber }
>;

export type UpdatedLastClaimIdEventFilter =
  TypedEventFilter<UpdatedLastClaimIdEvent>;

export type UpdatedLastMintIdEvent = TypedEvent<
  [BigNumber],
  { last: BigNumber }
>;

export type UpdatedLastMintIdEventFilter =
  TypedEventFilter<UpdatedLastMintIdEvent>;

export type UpdatedMaxMintTxEvent = TypedEvent<[BigNumber], { max: BigNumber }>;

export type UpdatedMaxMintTxEventFilter =
  TypedEventFilter<UpdatedMaxMintTxEvent>;

export type UpdatedMintPausedEvent = TypedEvent<[boolean], { paused: boolean }>;

export type UpdatedMintPausedEventFilter =
  TypedEventFilter<UpdatedMintPausedEvent>;

export type UpdatedMintPriceEvent = TypedEvent<
  [BigNumber],
  { price: BigNumber }
>;

export type UpdatedMintPriceEventFilter =
  TypedEventFilter<UpdatedMintPriceEvent>;

export interface TestMoonBase extends BaseContract {
  contractName: "TestMoonBase";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestMoonBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canClaim(
      mlzId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canMint(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claim(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentClaimId(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentMintId(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastClaimId(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastMintId(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMintTx(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBatches(
      batches: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPaused(overrides?: CallOverrides): Promise<[boolean]>;

    mintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    mlz(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCurrentClaimId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCurrentMintId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLastClaimId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLastMintId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxMintTx(
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMintPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMintPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawNFT(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  canClaim(mlzId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  canMint(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  claim(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentClaimId(overrides?: CallOverrides): Promise<BigNumber>;

  currentMintId(overrides?: CallOverrides): Promise<BigNumber>;

  lastClaimId(overrides?: CallOverrides): Promise<BigNumber>;

  lastMintId(overrides?: CallOverrides): Promise<BigNumber>;

  maxMintTx(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBatches(
    batches: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPaused(overrides?: CallOverrides): Promise<boolean>;

  mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  mlz(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCurrentClaimId(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCurrentMintId(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLastClaimId(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLastMintId(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxMintTx(
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMintPaused(
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMintPrice(
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawNFT(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canClaim(mlzId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    canMint(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    claim(tokenIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    currentClaimId(overrides?: CallOverrides): Promise<BigNumber>;

    currentMintId(overrides?: CallOverrides): Promise<BigNumber>;

    lastClaimId(overrides?: CallOverrides): Promise<BigNumber>;

    lastMintId(overrides?: CallOverrides): Promise<BigNumber>;

    maxMintTx(overrides?: CallOverrides): Promise<BigNumber>;

    mint(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mintBatches(
      batches: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintPaused(overrides?: CallOverrides): Promise<boolean>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mlz(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCurrentClaimId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCurrentMintId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLastClaimId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLastMintId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxMintTx(
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMintPaused(paused: boolean, overrides?: CallOverrides): Promise<void>;

    updateMintPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawNFT(id: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Claimed(uint256)"(amount?: null): ClaimedEventFilter;
    Claimed(amount?: null): ClaimedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UpdatedCurrentClaimId(uint256)"(
      current?: null
    ): UpdatedCurrentClaimIdEventFilter;
    UpdatedCurrentClaimId(current?: null): UpdatedCurrentClaimIdEventFilter;

    "UpdatedCurrentMintId(uint256)"(
      current?: null
    ): UpdatedCurrentMintIdEventFilter;
    UpdatedCurrentMintId(current?: null): UpdatedCurrentMintIdEventFilter;

    "UpdatedLastClaimId(uint256)"(last?: null): UpdatedLastClaimIdEventFilter;
    UpdatedLastClaimId(last?: null): UpdatedLastClaimIdEventFilter;

    "UpdatedLastMintId(uint256)"(last?: null): UpdatedLastMintIdEventFilter;
    UpdatedLastMintId(last?: null): UpdatedLastMintIdEventFilter;

    "UpdatedMaxMintTx(uint256)"(max?: null): UpdatedMaxMintTxEventFilter;
    UpdatedMaxMintTx(max?: null): UpdatedMaxMintTxEventFilter;

    "UpdatedMintPaused(bool)"(paused?: null): UpdatedMintPausedEventFilter;
    UpdatedMintPaused(paused?: null): UpdatedMintPausedEventFilter;

    "UpdatedMintPrice(uint256)"(price?: null): UpdatedMintPriceEventFilter;
    UpdatedMintPrice(price?: null): UpdatedMintPriceEventFilter;
  };

  estimateGas: {
    canClaim(
      mlzId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canMint(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentClaimId(overrides?: CallOverrides): Promise<BigNumber>;

    currentMintId(overrides?: CallOverrides): Promise<BigNumber>;

    lastClaimId(overrides?: CallOverrides): Promise<BigNumber>;

    lastMintId(overrides?: CallOverrides): Promise<BigNumber>;

    maxMintTx(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBatches(
      batches: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPaused(overrides?: CallOverrides): Promise<BigNumber>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mlz(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCurrentClaimId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCurrentMintId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLastClaimId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLastMintId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxMintTx(
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMintPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMintPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawNFT(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canClaim(
      mlzId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canMint(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentClaimId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentMintId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastClaimId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastMintId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMintTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBatches(
      batches: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mlz(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCurrentClaimId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCurrentMintId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLastClaimId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLastMintId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxMintTx(
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMintPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMintPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNFT(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
