/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ERC721ExtraData {
  export type DataStruct = {
    mintPaused: boolean;
    frozenURI: boolean;
    presaleStart: BigNumberish;
    presaleEnd: BigNumberish;
    maxSupply: BigNumberish;
    presalePrice: BigNumberish;
    salePrice: BigNumberish;
    maxMintTx: BigNumberish;
    maxMintPresale: BigNumberish;
    maxMintSale: BigNumberish;
  };

  export type DataStructOutput = [
    boolean,
    boolean,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    number,
    number,
    number
  ] & {
    mintPaused: boolean;
    frozenURI: boolean;
    presaleStart: number;
    presaleEnd: number;
    maxSupply: number;
    presalePrice: BigNumber;
    salePrice: BigNumber;
    maxMintTx: number;
    maxMintPresale: number;
    maxMintSale: number;
  };
}

export interface ERC721ExtraDataInterface extends utils.Interface {
  contractName: "ERC721ExtraData";
  functions: {
    "baseURI()": FunctionFragment;
    "extraDataToUint256((bool,bool,uint32,uint32,uint32,uint64,uint64,uint8,uint8,uint8))": FunctionFragment;
    "getExtraData()": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "owner()": FunctionFragment;
    "presaleMint(uint256,address,bytes32[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "saleMint(uint256,address)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setConfig(uint256)": FunctionFragment;
    "setMerkleRoot(bytes32)": FunctionFragment;
    "setUnrevealURI(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unrevealURI()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extraDataToUint256",
    values: [ERC721ExtraData.DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getExtraData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "presaleMint",
    values: [BigNumberish, string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleMint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnrevealURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unrevealURI",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extraDataToUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExtraData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnrevealURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unrevealURI",
    data: BytesLike
  ): Result;

  events: {
    "BaseURIUpdated(string)": EventFragment;
    "ConfigUpdated(uint256)": EventFragment;
    "MerkleRootUpdated(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UnrevealURIUpdated(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnrevealURIUpdated"): EventFragment;
}

export type BaseURIUpdatedEvent = TypedEvent<[string], { uri: string }>;

export type BaseURIUpdatedEventFilter = TypedEventFilter<BaseURIUpdatedEvent>;

export type ConfigUpdatedEvent = TypedEvent<[BigNumber], { conf: BigNumber }>;

export type ConfigUpdatedEventFilter = TypedEventFilter<ConfigUpdatedEvent>;

export type MerkleRootUpdatedEvent = TypedEvent<[string], { root: string }>;

export type MerkleRootUpdatedEventFilter =
  TypedEventFilter<MerkleRootUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UnrevealURIUpdatedEvent = TypedEvent<[string], { uri: string }>;

export type UnrevealURIUpdatedEventFilter =
  TypedEventFilter<UnrevealURIUpdatedEvent>;

export interface ERC721ExtraData extends BaseContract {
  contractName: "ERC721ExtraData";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721ExtraDataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseURI(overrides?: CallOverrides): Promise<[string]>;

    extraDataToUint256(
      arg0: ERC721ExtraData.DataStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { packedData: BigNumber }>;

    getExtraData(
      overrides?: CallOverrides
    ): Promise<[ERC721ExtraData.DataStructOutput]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    presaleMint(
      amount: BigNumberish,
      recipient: string,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saleMint(
      amount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      next: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnrevealURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unrevealURI(overrides?: CallOverrides): Promise<[string]>;
  };

  baseURI(overrides?: CallOverrides): Promise<string>;

  extraDataToUint256(
    arg0: ERC721ExtraData.DataStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExtraData(
    overrides?: CallOverrides
  ): Promise<ERC721ExtraData.DataStructOutput>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  presaleMint(
    amount: BigNumberish,
    recipient: string,
    proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saleMint(
    amount: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    next: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnrevealURI(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unrevealURI(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    baseURI(overrides?: CallOverrides): Promise<string>;

    extraDataToUint256(
      arg0: ERC721ExtraData.DataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExtraData(
      overrides?: CallOverrides
    ): Promise<ERC721ExtraData.DataStructOutput>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    presaleMint(
      amount: BigNumberish,
      recipient: string,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    saleMint(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(uri: string, overrides?: CallOverrides): Promise<void>;

    setConfig(next: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMerkleRoot(root: BytesLike, overrides?: CallOverrides): Promise<void>;

    setUnrevealURI(uri: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unrevealURI(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BaseURIUpdated(string)"(uri?: null): BaseURIUpdatedEventFilter;
    BaseURIUpdated(uri?: null): BaseURIUpdatedEventFilter;

    "ConfigUpdated(uint256)"(conf?: null): ConfigUpdatedEventFilter;
    ConfigUpdated(conf?: null): ConfigUpdatedEventFilter;

    "MerkleRootUpdated(bytes32)"(root?: null): MerkleRootUpdatedEventFilter;
    MerkleRootUpdated(root?: null): MerkleRootUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UnrevealURIUpdated(string)"(uri?: null): UnrevealURIUpdatedEventFilter;
    UnrevealURIUpdated(uri?: null): UnrevealURIUpdatedEventFilter;
  };

  estimateGas: {
    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    extraDataToUint256(
      arg0: ERC721ExtraData.DataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExtraData(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    presaleMint(
      amount: BigNumberish,
      recipient: string,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saleMint(
      amount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConfig(
      next: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMerkleRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnrevealURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unrevealURI(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extraDataToUint256(
      arg0: ERC721ExtraData.DataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExtraData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleMint(
      amount: BigNumberish,
      recipient: string,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saleMint(
      amount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      next: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnrevealURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unrevealURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
